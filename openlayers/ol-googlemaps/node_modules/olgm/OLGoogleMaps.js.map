{"version":3,"file":"OLGoogleMaps.js","sources":["../../src/olgm/OLGoogleMaps.js"],"sourcesContent":["/**\n * @module olgm/OLGoogleMaps\n */\nimport Abstract from './Abstract.js';\nimport LayersHerald from './herald/Layers.js';\n\n/**\n * @typedef {Object} Options\n * @property {module:ol/PluggableMap} map The OpenLayers map.\n * @property {module:olgm/gm/MapIcon~Options} [mapIconOptions] Options for the MapIcon object if it exists\n * @property {module:olgm/herald/Herald~WatchOptions} [watch] For each layer type, a boolean indicating whether the library should watch and let layers of that type should be rendered by Google Maps or not. Defaults to `true` for each option.\n */\n\n/**\n * @classdesc\n * The main component of this library. It binds an existing OpenLayers map to\n * a Google Maps map it creates through the use of `herald` objects. Each\n * herald is responsible of synchronizing something from the OpenLayers map\n * to the Google Maps one, which makes OpenLayers the master source of\n * interactions. This allows the development of applications without having\n * to worry about writing code that uses the Google Maps API.\n *\n * Here's an architecture overview of what the different heralds, where they\n * are created and on what they act:\n *\n *     olgm.OLGoogleMaps <-- ol.Map\n *      |\n *      |__olgm.herald.Layers <-- ol.Collection<ol.layer.Base>\n *         |                      |\n *         |                      |__olgm.layer.Google\n *         |                      |\n *         |                      |__ol.layer.Vector\n *         |                      |\n *         |                      |__ol.layer.TileLayer\n *         |                      |\n *         |                      |__ol.layer.ImageLayer\n *         |\n *         |__olgm.herald.View <-- ol.View\n *         |\n *         |__olgm.herald.TileSource <-- ol.source.Tile\n *         |\n *         |__olgm.herald.ImageWMSSource <-- ol.source.ImageWMS\n *         |\n *         |__olgm.herald.VectorSource <-- ol.source.Vector\n *            |\n *            |__olgm.herald.Feature <-- ol.Feature\n *\n * @api\n */\nclass OLGoogleMaps extends Abstract {\n  /**\n   * @param {module:olgm/OLGoogleMaps~Options} options Options.\n   */\n  constructor(options) {\n    const gmapEl = document.createElement('div');\n    gmapEl.style.height = 'inherit';\n    gmapEl.style.width = 'inherit';\n\n    const gmap = new google.maps.Map(gmapEl, {\n      disableDefaultUI: true,\n      disableDoubleClickZoom: true,\n      draggable: false,\n      keyboardShortcuts: false,\n      mapTypeId: google.maps.MapTypeId.ROADMAP,\n      scrollwheel: false,\n      streetViewControl: false\n    });\n\n    super(options.map, gmap);\n\n    /**\n     * @type {Array<module:olgm/herald/Herald>}\n     * @private\n     */\n    this.heralds_ = [];\n\n    const watchOptions = options.watch !== undefined ?\n      options.watch : {};\n\n    const mapIconOptions = options.mapIconOptions !== undefined ?\n      options.mapIconOptions : {};\n\n    /**\n     * @type {module:olgm/herald/Layers}\n     * @private\n     */\n    this.layersHerald_ = new LayersHerald(\n      this.ol3map, this.gmap, mapIconOptions, watchOptions);\n    this.heralds_.push(this.layersHerald_);\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.active_ = false;\n  }\n\n  /**\n   * @api\n   */\n  activate() {\n\n    if (this.active_) {\n      return;\n    }\n\n    // activate heralds\n    for (let i = 0, len = this.heralds_.length; i < len; i++) {\n      this.heralds_[i].activate();\n    }\n\n    this.active_ = true;\n  }\n\n\n  /**\n   * @api\n   */\n  deactivate() {\n\n    if (!this.active_) {\n      return;\n    }\n\n    // deactivate heralds\n    for (let i = 0, len = this.heralds_.length; i < len; i++) {\n      this.heralds_[i].deactivate();\n    }\n\n    this.active_ = false;\n  }\n\n\n  /**\n   * @return {boolean} whether or not google maps is active\n   * @api\n   */\n  getGoogleMapsActive() {\n    return this.active_ && this.layersHerald_.getGoogleMapsActive();\n  }\n\n\n  /**\n   * @return {google.maps.Map} the google maps map\n   * @api\n   */\n  getGoogleMapsMap() {\n    return this.gmap;\n  }\n\n\n  /**\n   * Set the watch options\n   * @param {module:olgm/herald/Herald~WatchOptions} watchOptions whether each layer type\n   * should be watched\n   * @api\n   */\n  setWatchOptions(watchOptions) {\n    const newWatchOptions = watchOptions !== undefined ? watchOptions : {};\n    this.layersHerald_.setWatchOptions(newWatchOptions);\n  }\n\n\n  /**\n   * @api\n   */\n  toggle() {\n    if (this.active_) {\n      this.deactivate();\n    } else {\n      this.activate();\n    }\n  }\n\n\n  /**\n   * Trigger the layer ordering functions in the heralds. We listen for layers\n   * added and removed, which usually happens when we change the order of the\n   * layers in OL3, but this function allows refreshing it manually in case\n   * the order is being change in another way.\n   * @api\n   */\n  orderLayers() {\n    this.layersHerald_.orderLayers();\n  }\n\n\n  /**\n   * Refresh layers and features that might need it (only ImageWMS so far)\n   * @api\n   */\n  refresh() {\n    this.layersHerald_.refresh();\n  }\n}\n\n\nexport default OLGoogleMaps;\n"],"names":["const","super","let","this"],"mappings":"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"}
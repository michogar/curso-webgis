{"version":3,"file":"TileSource.js","sources":["../../../src/olgm/herald/TileSource.js"],"sourcesContent":["/**\n * @module olgm/herald/TileSource\n */\nimport {getIntersection, getSize} from 'ol/extent.js';\nimport {get} from 'ol/proj.js';\nimport TileImage from 'ol/source/TileImage.js';\nimport {unlistenAllByKey} from '../util.js';\nimport PanesOverlay from '../gm/PanesOverlay.js';\nimport SourceHerald from './Source.js';\n\n/**\n * @typedef {Object} LayerCache\n * @property {Node|null} element\n * @property {google.maps.ImageMapType} googleTileLayer\n * @property {boolean} ignoreNextOpacityChange\n * @property {module:ol/layer/Tile} layer\n * @property {Array<module:ol/events~EventsKey|Array<module:ol/events~EventsKey>>} listenerKeys\n * @property {number} opacity\n * @property {number} zIndex\n */\n\nclass TileSourceHerald extends SourceHerald {\n  /**\n   * Listen to a tiled layer\n   * @param {module:ol/PluggableMap} ol3map openlayers map\n   * @param {google.maps.Map} gmap google maps map\n   */\n  constructor(ol3map, gmap) {\n    super(ol3map, gmap);\n\n    /**\n    * @type {Array<module:olgm/herald/TileSource~LayerCache>}\n    * @private\n    */\n    this.cache_ = [];\n\n    /**\n    * @type {Array<module:ol/layer/Tile>}\n    * @private\n    */\n    this.layers_ = [];\n\n    /**\n     * Panes accessor\n     * @type {module:olgm/gm/PanesOverlay}\n     * @private\n     */\n    this.panesOverlay_ = new PanesOverlay(gmap);\n\n    /**\n     * We can only access the mapPane pane after google maps is done loading.\n     * Accessing that pane means we can reorder the div for each tile layer\n     * Google Maps is rendering.\n     */\n    google.maps.event.addListenerOnce(gmap, 'idle', () => {\n      this.orderLayers();\n    });\n  }\n\n\n  /**\n   * @param {module:ol/layer/Base} layer layer to watch\n   * @override\n   */\n  watchLayer(layer) {\n    const tileLayer = /** @type {module:ol/layer/Tile} */ (layer);\n\n    // Source must be TileImage\n    const source = tileLayer.getSource();\n    if (!(source instanceof TileImage)) {\n      return;\n    }\n\n    this.layers_.push(tileLayer);\n\n    // opacity\n    const opacity = tileLayer.getOpacity();\n\n    const cacheItem = /** {@type module:olgm/herald/TileSource~LayerCache} */ ({\n      element: null,\n      ignoreNextOpacityChange: true,\n      layer: tileLayer,\n      listenerKeys: [],\n      opacity: opacity,\n      zIndex: 0\n    });\n\n    const tileGrid = source.getTileGrid();\n    let tileSize = 256;\n\n    if (tileGrid) {\n      const tileGridTileSize = tileGrid.getTileSize(0);\n      if (typeof tileGridTileSize === 'number') {\n        tileSize = tileGridTileSize;\n      }\n    }\n\n    const googleTileSize = new google.maps.Size(tileSize, tileSize);\n\n    const options = {\n      'getTileUrl': this.googleGetTileUrlFunction_.bind(this, tileLayer),\n      'tileSize': googleTileSize,\n      'isPng': true,\n      'opacity': opacity\n    };\n\n    // Create the tiled layer on the google layer\n    const googleTileLayer = new google.maps.ImageMapType(options);\n    if (tileLayer.getVisible()) {\n      this.gmap.overlayMapTypes.push(googleTileLayer);\n    }\n    cacheItem.googleTileLayer = googleTileLayer;\n\n    // Hide the google layer when the ol3 layer is invisible\n    cacheItem.listenerKeys.push(tileLayer.on('change:visible',\n      () => this.handleVisibleChange_(cacheItem)));\n    cacheItem.listenerKeys.push(tileLayer.on('change:opacity',\n      () => this.handleOpacityChange_(cacheItem)));\n    cacheItem.listenerKeys.push(tileLayer.getSource().on('change',\n      () => this.handleSourceChange_(cacheItem)));\n\n    // Activate the cache item\n    this.activateCacheItem_(cacheItem);\n    this.cache_.push(cacheItem);\n  }\n\n\n  /**\n   * This function is used by google maps to get the url for a tile at the given\n   * coordinates and zoom level\n   * @param {module:ol/layer/Tile} tileLayer layer to query\n   * @param {google.maps.Point} coords coordinates of the tile\n   * @param {number} zoom current zoom level\n   * @return {string|undefined} url to the tile\n   * @private\n   */\n  googleGetTileUrlFunction_(tileLayer, coords, zoom) {\n    const source = /** @type {ol.source.TileImage} */ (tileLayer.getSource());\n\n    // Check if we're within the accepted resolutions\n    const minResolution = tileLayer.getMinResolution();\n    const maxResolution = tileLayer.getMaxResolution();\n    const currentResolution = this.ol3map.getView().getResolution();\n    if (currentResolution < minResolution || currentResolution > maxResolution) {\n      return;\n    }\n\n    // Get a few variables from the source object\n    let getTileUrlFunction = source.getTileUrlFunction();\n    const proj = get('EPSG:3857');\n\n    // Convert the coords from google maps to ol3 tile format\n    const ol3Coords = [zoom, coords.x, (-coords.y) - 1];\n\n    // Save the extent for this layer, default to the one for the projection\n    let extent = tileLayer.getExtent();\n    if (!extent) {\n      extent = proj.getExtent();\n    }\n\n    /* Perform some verifications only possible with a TileGrid:\n    * 1. If the origin for the layer isn't in the upper left corner, we need\n    *    to move the tiles there. Google Maps doesn't support custom origins.\n    * 2. Google Maps checks for tiles which might not exist, for example tiles\n    *    above the world map. We need to filter out these to avoid invalid\n    *    requests.\n    */\n    const tileGrid = source.getTileGrid();\n    if (tileGrid) {\n      /* Google maps always draws the tiles from the top left corner. We need to\n      * adjust for that if our origin isn't at that location\n      * The default origin is at the top left corner, and the default tile size\n      * is 256.\n      */\n      const defaultOrigin = [-20037508.342789244, 20037508.342789244];\n      const defaultTileSize = 256;\n      const origin = tileGrid.getOrigin(0);\n\n      // Skip this step if the origin is at the top left corner\n      if (origin[0] != defaultOrigin[0] || origin[1] != defaultOrigin[1]) {\n        /* Tiles have a size equal to 2^n. Find the difference between the n for\n        * the current tileGrid versus the n for the expected tileGrid.\n        */\n        const tileGridTileSize = /** @type {number} */ (tileGrid.getTileSize(zoom));\n\n        const defaultTileSizeExponent = Math.log2(defaultTileSize);\n        const tileSizeExponent = Math.log2(tileGridTileSize);\n        const exponentDifference = tileSizeExponent - defaultTileSizeExponent;\n\n        /* Calculate the offset to add to the tile coordinates, assuming the\n        * origin to fix is equal to [0, 0]. TODO: Support different origins\n        */\n        const nbTilesSide = Math.pow(2, zoom - exponentDifference);\n        const offset = nbTilesSide / 2;\n\n        // Add the offset. Move the tiles left (x--) and up (y++)\n        ol3Coords[1] = ol3Coords[1] - offset;\n        ol3Coords[2] = ol3Coords[2] + offset;\n      }\n\n      /* Get the intersection area between the wanted tile's extent and the\n      * layer's extent. If that intersection has an area smaller than 1, it\n      * means it's not part of the map. We do this because a tile directly\n      * above the map but not inside it still counts as an intersection, but\n      * with a size of 0.\n      */\n      const intersection = getIntersection(\n        extent, tileGrid.getTileCoordExtent(ol3Coords));\n      const intersectionSize = getSize(intersection);\n      const intersectionArea = intersectionSize[0] * intersectionSize[1];\n\n      if (intersectionArea < 1 || intersectionArea == Infinity) {\n        return;\n      }\n    }\n\n    let result = getTileUrlFunction(ol3Coords, 1, proj);\n\n    // TileJSON sources don't have their url function right away, try again\n    if (result === undefined) {\n      getTileUrlFunction = source.getTileUrlFunction();\n      result = getTileUrlFunction(ol3Coords, 1, proj);\n    }\n\n    return result;\n  }\n\n\n  /**\n   * Unwatch the tile layer\n   * @param {module:ol/layer/Base} layer layer to unwatch\n   * @override\n   */\n  unwatchLayer(layer) {\n    const tileLayer = /** @type {module:ol/layer/Tile} */ (layer);\n\n    const index = this.layers_.indexOf(tileLayer);\n    if (index !== -1) {\n      this.layers_.splice(index, 1);\n\n      const cacheItem = this.cache_[index];\n      unlistenAllByKey(cacheItem.listenerKeys);\n\n      // Remove the layer from google maps\n      const googleTileLayer = cacheItem.googleTileLayer;\n      const googleMapsLayers = this.gmap.overlayMapTypes;\n\n      // Get the position of the google layer so we can remove it\n      const layerIndex = googleMapsLayers.getArray().indexOf(googleTileLayer);\n      if (layerIndex != -1) {\n        googleMapsLayers.removeAt(layerIndex);\n      }\n\n      // opacity\n      tileLayer.setOpacity(cacheItem.opacity);\n\n      this.cache_.splice(index, 1);\n    }\n  }\n\n\n  /**\n   * Activate all cache items\n   * @api\n   * @override\n   */\n  activate() {\n    super.activate();\n    this.cache_.forEach(this.activateCacheItem_, this);\n  }\n\n\n  /**\n   * Activates an tile layer cache item.\n   * @param {module:olgm/herald/TileSource~LayerCache} cacheItem cacheItem to activate\n   * @private\n   */\n  activateCacheItem_(cacheItem) {\n    const layer = cacheItem.layer;\n    const visible = layer.getVisible();\n    if (visible && this.googleMapsIsActive) {\n      cacheItem.ignoreNextOpacityChange = true;\n      cacheItem.layer.setOpacity(0);\n    }\n  }\n\n\n  /**\n   * Deactivate all cache items\n   * @api\n   * @override\n   */\n  deactivate() {\n    super.deactivate();\n    this.cache_.forEach(this.deactivateCacheItem_, this);\n  }\n\n\n  /**\n   * Deactivates a Tile layer cache item.\n   * @param {module:olgm/herald/TileSource~LayerCache} cacheItem cacheItem to deactivate\n   * @private\n   */\n  deactivateCacheItem_(cacheItem) {\n    cacheItem.ignoreNextOpacityChange = true;\n    cacheItem.layer.setOpacity(cacheItem.opacity);\n  }\n\n\n  /**\n   * This function finds the div associated to each tile layer we watch, then\n   * it assigns them the correct z-index\n   * @api\n   */\n  orderLayers() {\n    const panes = this.panesOverlay_.getMapPanes();\n\n    if (!panes) {\n      return;\n    }\n    const mapPane = panes.mapPane;\n    const overlayMapTypes = this.gmap.overlayMapTypes;\n\n    // For each tile layer we watch\n    for (let i = 0; i < this.cache_.length; i++) {\n      // Calculate the wanted index\n      const cacheItem = this.cache_[i];\n      const layer = cacheItem.layer;\n      cacheItem.zIndex = this.findIndex(layer);\n\n      // Get the google overlay layer, and its index\n      const googleTileLayer = cacheItem.googleTileLayer;\n      const overlayIndex = overlayMapTypes.getArray().indexOf(googleTileLayer);\n\n      // If the layer is currently rendered by Google Maps\n      if (overlayIndex != -1) {\n        /**\n         * We remove it, look at the divs in the mapPane, then add it back and\n         * compare. This allows us to find which div is associated to that layer.\n         */\n        overlayMapTypes.removeAt(overlayIndex);\n        const childNodes = Array.prototype.slice.call(mapPane.childNodes);\n        overlayMapTypes.push(googleTileLayer);\n        const childNodesWithLayer = mapPane.childNodes;\n\n        /**\n         * Find which layer is missing from the list we created after removing\n         * the appropriate overlay\n         */\n        for (let j = 0; j < childNodesWithLayer.length; j++) {\n          if (childNodes.indexOf(childNodesWithLayer[j]) == -1) {\n            // Set a timeout because otherwise it won't work\n            cacheItem.element = childNodesWithLayer[j];\n            setTimeout(function() {\n              this.element.style.zIndex = this.zIndex;\n            }.bind(cacheItem), 0);\n          }\n        }\n      }\n    }\n  }\n\n\n  /**\n   * Handle the opacity being changed on the tile layer\n   * @param {module:olgm/herald/TileSource~LayerCache} cacheItem cacheItem for the\n   * watched layer\n   * @private\n   */\n  handleOpacityChange_(cacheItem) {\n    const layer = cacheItem.layer;\n    const newOpacity = cacheItem.layer.getOpacity();\n\n    /**\n     * Each time the opacity is set on the ol3 layer, we need to set it back to\n     * opacity 0, and apply the opacity to the layer rendered by Google Maps\n     * instead. However, setting the opacity back to 0 generates another opacity\n     * change event, so we need to ignore it\n     */\n    if (cacheItem.ignoreNextOpacityChange) {\n      cacheItem.ignoreNextOpacityChange = false;\n    } else {\n\n      cacheItem.googleTileLayer.setOpacity(newOpacity);\n      cacheItem.opacity = newOpacity;\n\n      const visible = layer.getVisible();\n      if (visible && this.googleMapsIsActive) {\n        cacheItem.ignoreNextOpacityChange = true;\n        cacheItem.layer.setOpacity(0);\n      }\n    }\n  }\n\n  /**\n   * Deal with the google tile layer when we enable or disable the OL3 tile layer\n   * @param {module:olgm/herald/TileSource~LayerCache} cacheItem cacheItem for the\n   * watched layer\n   * @private\n   */\n  handleVisibleChange_(cacheItem) {\n    const layer = cacheItem.layer;\n    const visible = layer.getVisible();\n\n    const googleTileLayer = cacheItem.googleTileLayer;\n    const googleMapsLayers = this.gmap.overlayMapTypes;\n\n    // Get the position of the google layer so we can remove it\n    const layerIndex = googleMapsLayers.getArray().indexOf(googleTileLayer);\n\n    if (visible) {\n      // Add the google tile layer only if it's not there already\n      if (layerIndex == -1) {\n        googleMapsLayers.push(googleTileLayer);\n      }\n      this.activateCacheItem_(cacheItem);\n    } else {\n      // Remove the google tile layer from the map if it hasn't been done already\n      if (layerIndex != -1) {\n        googleMapsLayers.removeAt(layerIndex);\n      }\n      this.deactivateCacheItem_(cacheItem);\n    }\n  }\n\n\n  /**\n   * Called the source of layer fires the 'change' event. Reload the google tile\n   * layer.\n   *\n   * @param {module:olgm/herald/TileSource~LayerCache} cacheItem cacheItem for the\n   * watched layer\n   * @private\n   */\n  handleSourceChange_(cacheItem) {\n    // Note: The 'changed' method of google.maps.MVCObject requires a param,\n    //       but it's not acutally used here.  It's just to satisfy the compiler.\n    cacheItem.googleTileLayer.changed('foo');\n  }\n}\n\n\nexport default TileSourceHerald;\n"],"names":["super","this","const","let"],"mappings":"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"}
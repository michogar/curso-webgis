{"version":3,"file":"MapElement.js","sources":["../../../src/olgm/gm/MapElement.js"],"sourcesContent":["/**\n * @module olgm/gm/MapElement\n */\n/**\n * @classdesc\n * This class is a parent for all elements that are drawn manually onto Google\n * Maps. This means drawing elements on a canvas attached to the Google Maps\n * map instead of drawing features on map tiles using their API.\n * This needs to be done for elements that are supported in OpenLayers 3 but\n * not in Google Maps, such as text labels on markers.\n *\n * Some of this code was borrowed from the MapLabel project, whose source code\n * can be found here: https://github.com/googlemaps/js-map-label\n * @api\n */\nclass MapElement extends ((window.google && window.google.maps && google.maps.OverlayView) || Object) {\n  /**\n   * Creates a new Map Element, to be drawn as an OverlayView\n   */\n  constructor() {\n    super();\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.drawn_ = false;\n\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.height_ = 0;\n\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.width_ = 0;\n  }\n\n\n  /**\n   * Draw features to the map (call redraw) and setup canvas if it's the first\n   * time we draw\n   * @api\n   * @override\n   */\n  draw() {\n    if (this.drawn_) {\n      this.redraw_();\n      return;\n    }\n\n    const canvas = this.canvas_;\n    if (!canvas) {\n      // onAdd has not been called yet.\n      return;\n    }\n\n    const ctx = canvas.getContext('2d');\n    const height = ctx.canvas.height;\n    const width = ctx.canvas.width;\n    this.width_ = width;\n    this.height_ = height;\n\n    if (!this.redraw_()) {\n      return;\n    }\n\n    this.drawn_ = true;\n  }\n\n\n  /**\n   * Redraw features to the map\n   * @return {boolean} whether or not the function ran successfully\n   * @private\n   */\n  redraw_() {\n    const latLng = /** @type {google.maps.LatLng} */ (this.get('position'));\n    if (!latLng) {\n      return false;\n    }\n\n    const projection = this.getProjection();\n    if (!projection) {\n      // The map projection is not ready yet so do nothing\n      return false;\n    }\n\n    const pos = projection.fromLatLngToDivPixel(latLng);\n    const height = this.height_;\n    const width = this.width_;\n\n    const offsetX = this.get('offsetX') || 0;\n    const offsetY = this.get('offsetY') || 0;\n\n    const style = this.canvas_.style;\n    style['top'] = (pos.y - (height / 2) + offsetY) + 'px';\n    style['left'] = (pos.x - (width / 2) + offsetX) + 'px';\n\n    style['visibility'] = this.getVisible_();\n\n    return true;\n  }\n\n\n  /**\n   * Get the visibility of the element.\n   * @private\n   * @return {string} blank string if visible, 'hidden' if invisible.\n   */\n  getVisible_() {\n    const minZoom = /** @type {number} */ (this.get('minZoom'));\n    const maxZoom = /** @type {number} */ (this.get('maxZoom'));\n\n    if (minZoom === undefined && maxZoom === undefined) {\n      return '';\n    }\n\n    const map = this.getMap();\n    if (!map) {\n      return '';\n    }\n\n    const mapZoom = map.getZoom();\n    if (mapZoom < minZoom || mapZoom > maxZoom) {\n      return 'hidden';\n    }\n    return '';\n  }\n\n\n  /**\n   * Delete canvas when removing the element\n   * @api\n   * @override\n   */\n  onRemove() {\n    const canvas = this.canvas_;\n    if (canvas && canvas.parentNode) {\n      canvas.parentNode.removeChild(canvas);\n    }\n  }\n}\nexport default MapElement;\n"],"names":["super","const"],"mappings":"AAAA;;;;;;;;;;;;;;;AAeA,IAAM,UAAU,GAAqF;EAInG,mBAAW,GAAG;IACZA,eAAK,KAAC,CAAC,CAAC;;;;;;IAMR,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;;;;;;;IAOpB,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;;;;;;;IAOjB,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;;;;;gDACjB;;;;;;;;;uBASD,qBAAI,GAAG;IACL,IAAI,IAAI,CAAC,MAAM,EAAE;MACf,IAAI,CAAC,OAAO,EAAE,CAAC;MACf,OAAO;KACR;;IAEDC,GAAK,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;IAC5B,IAAI,CAAC,MAAM,EAAE;;MAEX,OAAO;KACR;;IAEDA,GAAK,CAAC,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IACpCA,GAAK,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC;IACjCA,GAAK,CAAC,KAAK,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;IAC/B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACpB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;;IAEtB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE;MACnB,OAAO;KACR;;IAED,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IACpB;;;;;;;;uBAQD,2BAAO,GAAG;IACRA,GAAK,CAAC,MAAM,qCAAqC,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;IACxE,IAAI,CAAC,MAAM,EAAE;MACX,OAAO,KAAK,CAAC;KACd;;IAEDA,GAAK,CAAC,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;IACxC,IAAI,CAAC,UAAU,EAAE;;MAEf,OAAO,KAAK,CAAC;KACd;;IAEDA,GAAK,CAAC,GAAG,GAAG,UAAU,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;IACpDA,GAAK,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;IAC5BA,GAAK,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;;IAE1BA,GAAK,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IACzCA,GAAK,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;;IAEzCA,GAAK,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;IACjC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,GAAG,IAAI,CAAC;IACvD,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,GAAG,IAAI,CAAC;;IAEvD,KAAK,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;;IAEzC,OAAO,IAAI,CAAC;IACb;;;;;;;;uBAQD,mCAAW,GAAG;IACZA,GAAK,CAAC,OAAO,yBAAyB,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;IAC5DA,GAAK,CAAC,OAAO,yBAAyB,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;;IAE5D,IAAI,OAAO,KAAK,SAAS,IAAI,OAAO,KAAK,SAAS,EAAE;MAClD,OAAO,EAAE,CAAC;KACX;;IAEDA,GAAK,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;IAC1B,IAAI,CAAC,GAAG,EAAE;MACR,OAAO,EAAE,CAAC;KACX;;IAEDA,GAAK,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,EAAE,CAAC;IAC9B,IAAI,OAAO,GAAG,OAAO,IAAI,OAAO,GAAG,OAAO,EAAE;MAC1C,OAAO,QAAQ,CAAC;KACjB;IACD,OAAO,EAAE,CAAC;IACX;;;;;;;;uBAQD,6BAAQ,GAAG;IACTA,GAAK,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;IAC5B,IAAI,MAAM,IAAI,MAAM,CAAC,UAAU,EAAE;MAC/B,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;KACvC;GACF;;;EAnIsB,CAAC,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,MAAM,IAoInG;AACD,eAAe,UAAU,CAAC;"}